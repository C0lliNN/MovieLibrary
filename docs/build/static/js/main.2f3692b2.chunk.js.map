{"version":3,"sources":["components/SearchBar/SearchBar.module.css","components/Header/Header.module.css","components/MovieInformation/MovieInformation.module.css","components/Spinner/Spinner.module.css","components/ErrorMessage/ErrorMessage.module.css","assets/img/search.svg","components/Movies/Movie/Movie.module.css","components/Movies/Movies.module.css","components/Footer/Footer.module.css","components/Header/Header.js","components/Spinner/Spinner.js","components/ErrorMessage/ErrorMessage.js","components/MovieInformation/MovieInformation.js","containers/MovieDetails/MovieDetails.js","components/SearchBar/SearchBar.js","components/Movies/Movie/Movie.js","components/Movies/Movies.js","containers/MovieSearch/MovieSearch.js","components/Footer/Footer.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","className","classes","Header","to","Title","id","defaultMessage","props","Spinner","text","ErrorMessage","message","information","movie","companies","map","company","name","push","key","join","releaseDate","Date","value","year","month","day","genres","genre","homepage","href","target","rel","overview","MovieInformation","title","src","alt","TextInfo","MovieDetails","state","loading","error","content","this","queryLanguage","intl","formatMessage","axios","get","match","params","then","response","setState","data","catch","Component","injectIntl","SearchBar","onSubmit","onSearchSubmit","required","onChange","onValueChange","Input","placeholder","Button","searchIcon","notSpecifiedText","releaseYear","noPosterAvailable","image","Movie","movies","substring","searchByText","mostPopularMoviesText","sectionTitle","query","Movies","MovieSearch","searchFieldValue","queryString","onValueChangeHandler","event","onSearchSubmitHandler","preventDefault","trim","history","encodeURI","results","prevProps","prevState","snapshot","url","URLSearchParams","location","search","Footer","getFullYear","document","path","component","Boolean","window","hostname","defaults","baseURL","messages","messages_pt","messages_en","language","navigator","split","ReactDOM","render","locale","getElementById","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.2f3692b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"SearchBar_SearchBar__2erV7\",\"Input\":\"SearchBar_Input__33z7k\",\"Button\":\"SearchBar_Button__324iJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1V2Rk\",\"Title\":\"Header_Title__jUppm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieInformation\":\"MovieInformation_MovieInformation__1wJS0\",\"TextInfo\":\"MovieInformation_TextInfo__16mYi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__W-iXA\",\"load2\":\"Spinner_load2__34a17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorMessage\":\"ErrorMessage_ErrorMessage__1yqxK\"};","module.exports = __webpack_public_path__ + \"static/media/search.a551e802.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Movie\":\"Movie_Movie__2sQvK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Movies\":\"Movies_Movies__1AXuu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__5tB1I\"};","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport {Link} from 'react-router-dom'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nexport default () => (\r\n    <header className={classes.Header}>\r\n        <Link to=\"/\">\r\n            <h1 className={classes.Title}>\r\n            <FormattedMessage\r\n                id=\"Header.title\"\r\n                defaultMessage=\"Movie Library\"/>\r\n            </h1>\r\n        </Link>\r\n        \r\n    </header>\r\n)","import React from 'react'\r\nimport classes from './Spinner.module.css'\r\n\r\nexport default (props) => (\r\n    <div className={classes.Spinner}>{props.text}</div>\r\n)","import React from 'react'\r\nimport classes from './ErrorMessage.module.css'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nexport default (props) => (\r\n    <div className={classes.ErrorMessage}>\r\n        <h2>\r\n            <FormattedMessage \r\n                id=\"ErrorMessage.title\"\r\n                defaultMessage=\"Something unexpected has happened!\"/>\r\n        </h2>\r\n        <p>\r\n            <FormattedMessage\r\n                id=\"ErrorMessage.error\"\r\n                defaultMessage=\"Error:\"/> \r\n            {props.message}\r\n        </p>\r\n    </div>\r\n)","import React from 'react'\r\nimport classes from './MovieInformation.module.css'\r\nimport { FormattedMessage, FormattedDate } from 'react-intl'\r\n\r\nexport default (props) => {\r\n\r\n    const information = []\r\n\r\n    if (props.movie['production_companies']) {\r\n        const companies = props.movie['production_companies'].map(company => company.name)\r\n\r\n        information.push(\r\n            <p key=\"companies\">\r\n                <span>\r\n                    <FormattedMessage \r\n                        id=\"MovieInformation.production\"\r\n                        defaultMessage=\"Production:\"/>\r\n                </span>\r\n                &nbsp;\r\n                {companies.join(', ')}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if (props.movie['release_date']) {\r\n\r\n        const releaseDate = new Date(props.movie['release_date']);\r\n\r\n        \r\n\r\n        information.push(\r\n            <p key=\"releaseDate\">\r\n                <span>\r\n                    <FormattedMessage\r\n                        id=\"MovieInformation.releaseDate\"\r\n                        defaultMessage=\"Release Date:\"/>\r\n                    &nbsp;\r\n                </span>\r\n                <FormattedDate\r\n                    value={releaseDate}\r\n                    year=\"numeric\"\r\n                    month=\"2-digit\"\r\n                    day=\"2-digit\"/>\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if (props.movie.genres) {\r\n        const genres = props.movie.genres.map(genre => genre.name)\r\n        information.push(\r\n            <p key=\"genres\">\r\n                <span>\r\n                    <FormattedMessage\r\n                        id=\"MovieInformation.genres\" \r\n                        defaultMessage=\"Genres:\"/>\r\n                    &nbsp;\r\n                </span>\r\n                {genres.join(', ')}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if (props.movie.homepage) {\r\n        information.push(\r\n            <p key=\"website\">\r\n                <span>\r\n                    <FormattedMessage\r\n                        id=\"MovieInformation.website\"\r\n                        defaultMessage=\"Website:\"/>\r\n                    &nbsp;\r\n                </span>\r\n                <a \r\n                href={props.movie.homepage}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\">{props.movie.homepage}</a>\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if (props.movie.overview) {\r\n        information.push(\r\n            <p key=\"overview\">\r\n                <span>\r\n                    <FormattedMessage\r\n                        id=\"MovieInformation.overview\"\r\n                        defaultMessage=\"Overview:\"/>\r\n                    &nbsp;\r\n                </span>\r\n                {props.movie.overview}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <article className={classes.MovieInformation}>\r\n            <h2>{props.movie.title}</h2>\r\n            <div>\r\n                <div>\r\n                    <img \r\n                        src={`http://image.tmdb.org/t/p/w500/${props.movie['poster_path']}`}\r\n                        alt={props.movie.title + \" Poster\"}/>\r\n                </div>\r\n                <div className={classes.TextInfo}>\r\n                    {information}\r\n                </div>\r\n            </div>\r\n        </article>\r\n    )\r\n\r\n    \r\n}","import React, { Component } from 'react'\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport axios from 'axios';\r\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\r\nimport MovieInformation from '../../components/MovieInformation/MovieInformation'\r\nimport {injectIntl} from 'react-intl'\r\n\r\nclass MovieDetails extends Component {\r\n\r\n    state = {\r\n        loading: true,\r\n        movie: null,\r\n        error: null\r\n    }\r\n\r\n    render() {\r\n\r\n        let content = null;\r\n\r\n        if (this.state.loading) {\r\n            content = <Spinner text=\"Loading Movie Information...\"/>\r\n        }\r\n\r\n        if (this.state.movie) {\r\n            content = <MovieInformation movie={this.state.movie} />\r\n        }\r\n\r\n        if (this.state.error) {\r\n            content = <ErrorMessage/>\r\n        }\r\n\r\n        return (\r\n            <section>\r\n                {content}\r\n            </section>\r\n        )\r\n    }\r\n\r\n    componentDidMount () {\r\n\r\n        const queryLanguage = this.props.intl.formatMessage({\r\n            id: 'languageAPIIdentifider',\r\n            defaultMessage: 'en-US'\r\n        })\r\n\r\n        axios.get(`/movie/${this.props.match.params.id }?api_key=466eefcef086aaa1375e8ecfebc6a345&language=${queryLanguage}`)\r\n        .then(response => {\r\n            this.setState({\r\n                loading: false,\r\n                movie: response.data,\r\n                error: null\r\n            })\r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                loading: false,\r\n                movie: null,\r\n                error: error\r\n            })\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default injectIntl(MovieDetails);","import React from 'react'\r\nimport classes from './SearchBar.module.css'\r\nimport searchIcon from '../../assets/img/search.svg'\r\n\r\nexport default (props) => {\r\n\r\n    return(\r\n        <form \r\n            className={classes.SearchBar}\r\n            onSubmit={props.onSearchSubmit}>\r\n            <input\r\n                required \r\n                value={props.value}\r\n                onChange={props.onValueChange}\r\n                className={classes.Input}\r\n                placeholder={props.intl.formatMessage({\r\n                    id: 'SearchBar.placeholder',\r\n                    defaultMessage: 'Search a Movie...'\r\n                })}/>\r\n            <button className={classes.Button}>\r\n                <img src={searchIcon} alt=\"Search\"/>\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    \r\n}","import React from 'react'\r\nimport classes from './Movie.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default (props) => {\r\n\r\n    const notSpecifiedText = props.intl.formatMessage({\r\n        id: 'Movie.notSpecified',\r\n        defaultMessage: 'Not Specified'\r\n    });\r\n\r\n    const releaseYear = props.releaseYear ? props.releaseYear : notSpecifiedText;\r\n\r\n    const noPosterAvailable = props.intl.formatMessage({\r\n        id: 'Movie.noPosterAvailable',\r\n        defaultMessage: 'No Poster Available'\r\n    })\r\n\r\n    const image = props.image ? <img src={props.image} alt={`${props.title} Poster`}/> : <h4>{noPosterAvailable}</h4>\r\n\r\n    return (<article className={classes.Movie}>\r\n        <Link to={\"/movie/\" + props.id}>\r\n            <h3>{props.title}</h3>\r\n            {image}\r\n            <p>({releaseYear})</p>\r\n        </Link>\r\n        \r\n    </article>)\r\n}","import React from 'react'\r\nimport Movie from './Movie/Movie'\r\nimport classes from './Movies.module.css'\r\n\r\nexport default (props) => {\r\n\r\n    let movies = null;\r\n\r\n    if (props.movies) {\r\n        movies = props.movies.map(movie => {\r\n\r\n            const image = movie['poster_path'] ? `http://image.tmdb.org/t/p/w342/${movie['poster_path']}` : null;\r\n\r\n            const releaseYear = movie['release_date'] ? movie['release_date'].substring(0, 4) : null;\r\n\r\n            return (<Movie \r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.title} \r\n                image={image} \r\n                releaseYear={releaseYear} \r\n                intl={props.intl}/>)\r\n        })\r\n    }\r\n\r\n    const searchByText = props.intl.formatMessage({\r\n        id: 'Movies.searchBy',\r\n        defaultMessage: 'Search By'\r\n    })\r\n\r\n    const mostPopularMoviesText = props.intl.formatMessage({\r\n        id: 'Movies.mostPopularMovies',\r\n        defaultMessage: 'Most Popular Movies'\r\n    })\r\n\r\n    const sectionTitle = props.query ? searchByText + \" \" + props.query : mostPopularMoviesText;\r\n\r\n    return (\r\n        <div className={classes.Movies}>\r\n            <h2>{sectionTitle}</h2><br/>\r\n            <div>{movies}</div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport SearchBar from '../../components/SearchBar/SearchBar'\r\nimport Spinner from '../../components/Spinner/Spinner'\r\nimport Movies from '../../components/Movies/Movies';\r\nimport axios from 'axios'\r\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\r\nimport {injectIntl} from 'react-intl'\r\n\r\nclass MovieSearch extends Component {\r\n\r\n    state = {\r\n        movies: null,\r\n        loading: true,\r\n        error: false,\r\n        searchFieldValue: '',\r\n        queryString: ''\r\n    }\r\n\r\n    onValueChangeHandler = (event) => {\r\n        this.setState({\r\n            searchFieldValue: event.target.value\r\n        })\r\n    }\r\n\r\n    onSearchSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.searchFieldValue.trim() === '') {\r\n            \r\n            this.props.history.push('/');\r\n\r\n        } else {\r\n\r\n            this.setState({\r\n                loading: true,\r\n                error: null,\r\n                movies: null,\r\n            })\r\n\r\n            this.props.history.push('?query=' + encodeURI(this.state.searchFieldValue));\r\n       \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let content = null; \r\n\r\n        if (this.state.loading) {\r\n            content = <Spinner text=\"Loading Most Popular Movies\"/>\r\n        }\r\n\r\n        if (this.state.movies) {\r\n            content = <Movies \r\n                movies={this.state.movies} \r\n                query={this.state.queryString}\r\n                intl={this.props.intl}/>\r\n        }\r\n\r\n        if (this.state.error) {\r\n            content = <ErrorMessage message={this.state.error.message}/>\r\n        }\r\n\r\n        return (\r\n            \r\n            <section>\r\n                <SearchBar \r\n                    value={this.state.searchFieldValue}\r\n                    onValueChange={this.onValueChangeHandler}\r\n                    onSearchSubmit={this.onSearchSubmitHandler}\r\n                    intl={this.props.intl}\r\n                />\r\n                {content}\r\n            </section>\r\n        )\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        const queryLanguage = this.props.intl.formatMessage({\r\n            id: 'languageAPIIdentifider',\r\n            defaultMessage: 'en-US'\r\n        })\r\n\r\n        axios.get(`/movie/popular?api_key=466eefcef086aaa1375e8ecfebc6a345&language=${queryLanguage}&page=1`).then(response => {\r\n\r\n          this.setState({\r\n            movies: response.data.results,\r\n            loading: false,\r\n            error: null\r\n          })\r\n\r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                error: error,\r\n                movies: null,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n    \r\n        const queryString = new URLSearchParams(props.location.search).get('query')\r\n\r\n        if (state.queryString !== queryString) {\r\n            return {\r\n                queryString: queryString\r\n            }\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.queryString !== this.state.queryString) {\r\n\r\n            const queryLanguage = this.props.intl.formatMessage({\r\n                id: 'languageAPIIdentifider',\r\n                defaultMessage: 'en-US'\r\n            })\r\n\r\n            const url = this.state.queryString ? `/search/movie?api_key=466eefcef086aaa1375e8ecfebc6a345&language=${queryLanguage}&page=1&include_adult=true&query=${this.state.queryString}` : `/movie/popular?api_key=466eefcef086aaa1375e8ecfebc6a345&language=${queryLanguage}&page=1`;\r\n\r\n            axios.get(url).then(response => {\r\n                this.setState({\r\n                  movies: response.data.results,\r\n                  loading: false,\r\n                  error: null\r\n                })\r\n      \r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    error: error,\r\n                    movies: null,\r\n                    loading: false\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nexport default injectIntl(MovieSearch);\r\n","import React from 'react'\r\nimport classes from './Footer.module.css'\r\n\r\nexport default () => (\r\n    <footer className={classes.Footer}>\r\n        <h3>Raphael Collin &copy; {new Date().getFullYear()}</h3>\r\n    </footer>\r\n)","import React from 'react';\nimport './App.module.css'\nimport Header from '../../components/Header/Header';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport MovieDetails from '../MovieDetails/MovieDetails';\nimport MovieSearch from '../MovieSearch/MovieSearch';\nimport Footer from '../../components/Footer/Footer';\nimport {injectIntl} from 'react-intl'\n\nconst App = (props) => {\n\n    document.title = props.intl.formatMessage({\n      id: 'pageTitle',\n      defaultMessage: 'Movie Library'\n    });\n\n    return (\n      \n      <main>\n          \n          <BrowserRouter>\n      \n            <Header />\n            <Switch>\n                <Route path=\"/movie/:id\" component={MovieDetails}/>\n                <Route path=\"/\" component={MovieSearch}/>\n            </Switch>\n            \n            <Footer />\n      \n          </BrowserRouter>\n          \n          \n      </main>\n      \n    );\n  \n\n}\n\nexport default injectIntl(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios'\nimport {IntlProvider} from 'react-intl'\nimport messages_pt from './translations/pt.json'\nimport messages_en from './translations/en.json'\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\"\n\nconst messages = {\n    'pt': messages_pt,\n    'en': messages_en\n}\n\nconst language = navigator.language.split(/[-_]/)[0];\n\nReactDOM.render((\n    <IntlProvider locale={language} messages={messages[language]}>\n        <App /> \n    </IntlProvider>), \n    \ndocument.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}